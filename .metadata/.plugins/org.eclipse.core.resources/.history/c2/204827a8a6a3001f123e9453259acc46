package co.edu.uco.deviuco.usuarios.application.primaryports.mapper;


import java.util.UUID;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Named;
import org.mapstruct.factory.Mappers;

import co.edu.uco.deviuco.usuarios.application.primaryports.dto.RegisterNewAfiliadoDTO;
import co.edu.uco.deviuco.usuarios.application.primaryports.dto.sede.RegisterNewUbicacionDTO;
import co.edu.uco.deviuco.usuarios.domain.afiliado.AfiliadoDomain;
import co.edu.uco.deviuco.usuarios.domain.sede.SedeDomain;
import co.edu.uco.deviuco.usuarios.domain.tipoidentificacion.TipoIdentificacionDomain;
import co.edu.uco.deviuco.usuarios.domain.tipoubicacion.TipoUbicacionDomain;
import co.edu.uco.deviuco.usuarios.domain.ubicacion.UbicacionDomain;



public interface RegisterNewUbicacionMapper{
	
	
	RegisterNewAfiliadoMapper INSTANCE = Mappers.getMapper(RegisterNewAfiliadoMapper.class);

	@Mapping(source = "nombre", target = "nombre")
    @Mapping(source = "tipoUbicacionId", target = "tipoUbicacion", qualifiedByName = "mapToTipoUbicacionDomain")
    @Mapping(source = "sedeId", target = "sede", qualifiedByName = "mapToSedeDomain")
    UbicacionDomain toDomain(RegisterNewUbicacionDTO dto);

    
    	
    
	 @Named("mapToTipoUbicacionDomain")
	    default TipoUbicacionDomain mapToTipoUbicacionDomain(UUID tipoUbicacionId) {
	        return new TipoUbicacionDomain(tipoUbicacionId, null);
	 }

	 @Named("mapToSedeDomain")
	    default SedeDomain mapToSedeDomain(UUID sedeId) {
	        return new SedeDomain(sedeId, null);
	    }
	}